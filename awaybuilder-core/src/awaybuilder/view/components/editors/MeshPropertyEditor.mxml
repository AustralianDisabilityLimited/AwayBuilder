<?xml version="1.0" encoding="utf-8"?>
<editors:EditorBase xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark" xmlns:components="awaybuilder.view.components.*" xmlns:controls="awaybuilder.view.components.controls.*"
		 xmlns:editors="awaybuilder.view.components.editors.*">
	<fx:Declarations>
	</fx:Declarations>
    <fx:Script><![CDATA[
		import away3d.entities.Mesh;
		
		import awaybuilder.model.vo.scene.AssetVO;
		import awaybuilder.model.vo.scene.MeshVO;
		import awaybuilder.model.vo.scene.SubMeshVO;
		import awaybuilder.view.components.editors.events.PropertyEditorEvent;

		[Bindable]
		private var _asset:MeshVO;
		
		override protected function validate(asset:Object):void
		{
			if( !(asset is MeshVO) ) return;
			if( asset is MeshVO ) _asset = MeshVO(asset).clone() as MeshVO;
		}

        private function position_commitHandler(event:Event):void 
		{
            var newValue:Vector3D = new Vector3D(xStepper.value, yStepper.value, zStepper.value);
            dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.TRANSLATE, newValue, true));
        }
		private function pivot_commitHandler(event:Event):void {
			_asset.pivotX = pivotXStepper.value;
			_asset.pivotY = pivotYStepper.value;
			_asset.pivotZ = pivotZStepper.value;
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MESH_STEPPER_CHANGE, _asset));
		}
        private function rotation_commitHandler(event:Event):void 
		{
            var newValue:Vector3D = new Vector3D(rotationXStepper.value, rotationYStepper.value, rotationZStepper.value);
            dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.ROTATE, newValue, true));
        }

        private function scale_commitHandler(event:Event):void 
		{
            var newValue:Vector3D = new Vector3D(scaleXStepper.value, scaleYStepper.value, scaleZStepper.value);
            dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.SCALE, newValue, true));
        }

        private function name_changeHandler(event:Event):void 
		{
            var newValue:MeshVO = _asset.clone() as MeshVO;
            newValue.name = nameInput.text;
            dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MESH_CHANGE, newValue, true));
        }

        private function castShadowBox_changeHandler(event:Event):void 
		{
            _asset.castsShadows = castShadowBox.selected;
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MESH_CHANGE, _asset, true));
        }

        private function materialButton_clickHandler(event:MouseEvent):void 
		{
//            dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.SHOW_MATERIAL_PROPERTIES, _asset.material, true));
        }

		private function editParentObjectButton_clickHandler(event:MouseEvent):void
		{
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.SHOW_PARENT_MESH_PROPERTIES,  prevSelected.removeItemAt(prevSelected.length-1), true));
		}
		
		private function stepperFormatFunc(val:Number):String 
		{ 
			return val.toString().replace(".",","); 
		} 
		
		private function stepperParseFunc(val:String):Number 
		{ 
			var stringVal:String = val.replace(",","."); 
			return Number(stringVal);     
		} 
		
        ]]></fx:Script>

	
	<s:Group width="100%" top="0">
		<s:Rect left="0" right="0" top="3" bottom="3">
			<s:fill>
				<s:SolidColor color="0x111111" alpha="0.3"/>
			</s:fill>
		</s:Rect>
		<s:HGroup width="100%" verticalAlign="middle" paddingLeft="2" paddingRight="2" paddingTop="4" paddingBottom="4">
			<s:Button id="editParentObjectButton" styleName="editParentObjectButtonStyle" visible="{prevSelected.length>0}"
					  width="32" height="32" click="editParentObjectButton_clickHandler(event)"/>
			<s:Label width="100%" text="Mesh" fontWeight="bold" fontSize="14"/>
		</s:HGroup>
	</s:Group>
	
	<s:Form width="100%" skinClass="awaybuilder.view.skins.PropertyFormSkin">
		<s:FormItem label="Name" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%">
			<s:TextInput id="nameInput" width="100%" text="{_asset.name}" change="name_changeHandler(event)"/>
		</s:FormItem>
	</s:Form>
	<s:Spacer height="6"/>
	
    <controls:CollapsiblePanel width="100%" title="General" collapsed="true">
        <s:Form height="100%" skinClass="awaybuilder.view.skins.PropertyFormSkin">

            <s:FormItem label="Geometry" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%" enabled="false">
                <s:DropDownList width="100%"/>
           </s:FormItem>
            <s:FormItem label="Animator" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%" enabled="false">
                <s:DropDownList width="100%"/>
            </s:FormItem>
            <s:FormItem label="Cast Shadows" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%" enabled="false">
                <s:CheckBox id="castShadowBox" change="castShadowBox_changeHandler(event)" selected="{_asset.castsShadows}"/>
            </s:FormItem>

        </s:Form>
    </controls:CollapsiblePanel>
    <controls:CollapsiblePanel width="100%" title="Transformations" collapsed="true">
        <s:Form width="100%" skinClass="awaybuilder.view.skins.PropertyFormSkin">
            <s:FormItem label="Position" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%">
                <controls:DragableNumericStepper id="xStepper" stepSize="0.01" snapInterval="0.01"
                                   width="100%" value="{_asset.x}"
                                  change="position_commitHandler(event)" />
                <controls:DragableNumericStepper id="yStepper"  stepSize="0.01" snapInterval="0.01"
                                  width="100%" value="{_asset.y}"
                                  change="position_commitHandler(event)"/>
                <controls:DragableNumericStepper id="zStepper" stepSize="0.01" snapInterval="0.01"
                                   width="100%" value="{_asset.z}"
                                  change="position_commitHandler(event)"/>
            </s:FormItem>
			<s:FormItem label="Pivot Point" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%">
				<controls:DragableNumericStepper id="pivotXStepper" stepSize="0.01" snapInterval="0.01"
								   width="100%" value="{_asset.pivotX}"
								  change="pivot_commitHandler(event)" />
				<controls:DragableNumericStepper id="pivotYStepper" stepSize="0.01" snapInterval="0.01"
								  width="100%" value="{_asset.pivotY}"
								  change="pivot_commitHandler(event)"/>
				<controls:DragableNumericStepper id="pivotZStepper"  stepSize="0.01" snapInterval="0.01"
								 width="100%" value="{_asset.pivotZ}" 
								  change="pivot_commitHandler(event)"/>
			</s:FormItem>
            <s:FormItem label="Rotation" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%">
                <controls:DragableNumericStepper id="rotationXStepper" stepSize="1" snapInterval="0.01" allowValueWrap="true"
                                  minimum="-360" maximum="360" width="100%" value="{_asset.rotationX}" 
                                  change="rotation_commitHandler(event)"/>
                <controls:DragableNumericStepper id="rotationYStepper" stepSize="1" snapInterval="0.01" allowValueWrap="true"
                                  minimum="-360" maximum="360" width="100%" value="{_asset.rotationY}"
                                  change="rotation_commitHandler(event)"/>
                <controls:DragableNumericStepper id="rotationZStepper" stepSize="1" snapInterval="0.01" allowValueWrap="true"
                                  minimum="-360" maximum="360" width="100%" value="{_asset.rotationZ}" 
                                  change="rotation_commitHandler(event)"/>
            </s:FormItem>
			<controls:HorizontalFormSeparator/>
            <s:FormItem label="Scale" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%">
                <controls:DragableNumericStepper id="scaleXStepper" stepSize="0.01" snapInterval="0.01"
                                   width="100%" value="{_asset.scaleX}"
                                  change="scale_commitHandler(event)" />
                <controls:DragableNumericStepper id="scaleYStepper" stepSize="0.01" snapInterval="0.01"
                                  width="100%" value="{_asset.scaleY}"
                                  change="scale_commitHandler(event)"/>
                <controls:DragableNumericStepper id="scaleZStepper" stepSize="0.01" snapInterval="0.01"
                                   width="100%" value="{_asset.scaleZ}"
                                  change="scale_commitHandler(event)"/>
            </s:FormItem>
        </s:Form>
    </controls:CollapsiblePanel>
    <controls:CollapsiblePanel width="100%" title="Materials" collapsed="false">
        <s:List dataProvider="{_asset.subMeshes}" width="100%" skinClass="awaybuilder.view.skins.SubMeshesListSkin"/>
    </controls:CollapsiblePanel>
	<controls:CollapsiblePanel width="100%" title="Extras" collapsed="true">
	</controls:CollapsiblePanel>
	
</editors:EditorBase>
